extern crate clap;

use circuits::all_stark::AllStark;
use circuits::config::StarkConfig;
use circuits::proof::AllProof;
use circuits::prover::prove;
use circuits::verifier::verify_proof;
use clap::{arg, Command};
use core::program::Program;
use core::trace::trace::Trace;
use executor::Process;
use log::debug;
use plonky2::field::types::Field;
use plonky2::plonk::config::{GenericConfig, PoseidonGoldilocksConfig};
use plonky2::util::timing::TimingTree;
use std::fs::File;
use std::io::{BufRead, BufReader};
//use std::path::PathBuf;

#[allow(dead_code)]
const D: usize = 2;
#[allow(dead_code)]
type C = PoseidonGoldilocksConfig;
#[allow(dead_code)]
type F = <C as GenericConfig<D>>::F;

fn main() {
    let matches = Command::new("olavm")
        .about("Olavm cli")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .allow_external_subcommands(true)
        .subcommand(
            Command::new("run")
                .about("Run an program from an input code file")
                .args(&[
                    arg!(-i --input <INPUT> "Must set a input file for OlaVM executing"),
                    arg!(-o --output <OUTPUT> "Must set a output file for OlaVM executing"),
                ])
                .arg_required_else_help(true),
        )
        .subcommand(
            Command::new("prove")
                .about("generate proof from executed program")
                .args(&[
                    arg!(-i --input <Trace> "Must set a trace file generated by OlaVM executor"),
                    arg!(-o --output <Proof> "Must set a file for save proofs"),
                ])
                .arg_required_else_help(true),
        )
        .subcommand(
            Command::new("verify")
                .about("verifiy generated proof")
                .args(&[arg!(-i --input <Trace> "Must set a proof file generated by OlaVM prover")])
                .arg_required_else_help(true),
        )
        .get_matches();

    match matches.subcommand() {
        Some(("run", sub_matches)) => {
            let path = sub_matches.get_one::<String>("input").expect("required");
            debug!("input file path: {}", path);

            let mut program: Program = Program {
                instructions: Vec::new(),
                trace: Default::default(),
            };

            let file = File::open(path).unwrap();
            let mut input_lines = BufReader::new(file).lines();
            loop {
                let inst = input_lines.next();
                if let Some(inst) = inst {
                    debug!("inst:{:?}", inst);
                    program.instructions.push(inst.unwrap());
                } else {
                    break;
                }
            }

            let mut process = Process::new();
            process
                .execute(&mut program, true)
                .expect("OlaVM execute fail");
            let path = sub_matches.get_one::<String>("output").expect("required");
            debug!("output file path: {}", path);
            let file = File::create(path).unwrap();
            serde_json::to_writer(file, &program.trace).unwrap();
        }
        Some(("prove", sub_matches)) => {
            let path = sub_matches.get_one::<String>("input").expect("required");
            println!("input file path: {}", path);

            let file = File::open(path).unwrap();
            let reader = BufReader::new(file);

            let trace: Trace = serde_json::from_reader(reader).unwrap();
            let program: Program = Program {
                instructions: trace.raw_binary_instructions.clone(),
                trace,
            };

            let mut all_stark = AllStark::<F, D>::default();
            let config = StarkConfig::standard_fast_config();
            let proof = prove::<F, C, D>(
                &program,
                &mut all_stark,
                &config,
                &mut TimingTree::default(),
            )
            .unwrap();

            let path = sub_matches.get_one::<String>("output").expect("required");
            println!("output file path: {}", path);
            let file = File::create(path).unwrap();
            serde_json::to_writer(file, &proof).unwrap();
        }
        Some(("verify", sub_matches)) => {
            let path = sub_matches.get_one::<String>("input").expect("required");
            println!("input file path: {}", path);

            let file = File::open(path).unwrap();
            let reader = BufReader::new(file);

            let proof: AllProof<F, C, D> = serde_json::from_reader(reader).unwrap();
            let mut all_stark = AllStark::<F, D>::default();
            // TODO: fix by add challenge to StarkProof
            all_stark.cpu_stark.set_compress_challenge(F::ZERO).unwrap();
            all_stark
                .bitwise_stark
                .set_compress_challenge(F::ZERO)
                .unwrap();
            let config = StarkConfig::standard_fast_config();
            match verify_proof(all_stark, proof, &config) {
                Err(error) => println!("verify failed {error}"),
                _ => println!("verify succeed!"),
            }
        }
        _ => unreachable!(),
    }
}
